---
title: Using Hardware Security Modules with CredHub
owner: CredHub
---

This topic describes how to configure [AWS CloudHSM](https://aws.amazon.com/cloudhsm) devices to work with CredHub. 

<p class="note"><strong>Note</strong>: If you use a <a href="https://safenet.gemalto.com/data-encryption/hardware-security-modules-hsms/safenet-network-hsm/">Luna SafeNet HSM</a>, rather than AWS, skip over the device allocation portion and start by <a href="#initialize-and-configure">initializing and configuring your HSMs</a>.</p>

If you store critical data in CredHub, configuring at least two Hardware Security Modules (HSMs) replicates your keys and provides redundancy and security in the event of an HSM failure. With a single HSM, device failure renders your CredHub data inaccessible.

## <a id='checklist'></a>Preparation Checklist

At the end of this topic, you will have collected or created the following resources:

1. <a href="#hsm-encryption-keys">Encryption Key Name</a>
1. <a href="#retrieve-hsm-certificate">HSM Certificate</a>
1. <a href="#cloning">Partition name and password</a>
1. <a href="#establish-network-trust-link">Client certificate and private key</a>
1. <a href="#create-hsm-partition">Partition serial numbers</a>

## <a id='create-new-aws'></a>Create New AWS CloudHSMs

### <a id='aws-env-prereq'></a>AWS Environment Prerequisites
<p class="note"><strong>Note</strong>: For high availability (HA), use at least two HSM instances. AWS documentation recommends that you also use a subnet for a publicly available Control Instance, but for this product that is unnecessary. CredHub acts as a Control Instance.</p>

<ul>
<li>A Virtual Private Cloud (VPC)</li>
<li><strong>For each HSM instance</strong>: One private subnet in its own Availability Zone (AZ)</li>
<li>IAM Role for the HSM with a policy equivalent to <code>AWSCloudHSMRole</code> policy</li>
<li>The Security Group must allow traffic from the CredHub security group on ports 22 (SSH) and 1792 (HSM)</li>
</ul>

###<a id='create-new-devices'></a> Create New Devices
<ol>
<li><a href="http://docs.aws.amazon.com/cloudhsm/latest/userguide/install_cli.html">Install cloudhsm CLI</a>.</li>
<li>Create SSH keypairs for all planned HSMs.

<pre class="terminal">
$ ssh-keygen -b 4096 -t rsa -N YOUR-PASSWORD -f path/to/ssh-key.pem
</pre>
</li>

<li>Create the cloudhsm.conf file with the following text, replacing each <code>VALUE</code> with the correct value:
  <pre><code>
  aws_access_key_id=VALUE
  aws_secret_access_key=VALUE
  aws_region=VALUE
  </code></pre>
  <br>
  For more information about the configuration file for <code>cloudhsm</code> CLI, read <a href="http://docs.aws.amazon.com/cloudhsm/latest/userguide/cli-getting-started.html#config_files">Amazon's documentation</a>.</li>

<li>Run the following command to create each HSM and place it in the appropriate subnet:

<pre class="terminal">
$ cloudhsm create-hsm \
    --conf_file path/to/cloudhsm.conf \
    --subnet-id SUBNET-ID \
    --ssh-public-key-file path/to/ssh-key.pem.pub \
    --iam-role-arn IAM-HSN-ROLE-ARN
</pre>
</li>
<li>Assign the security group to each HSM. Start by getting the Elastic Network Interface ID <code>EniID</code> of the HSM.

<pre class="terminal">
$ cloudhsm describe-hsm -H HSM-ARN -r AWS-REGION
</pre>

Then edit the network interface to assign the security group:

<pre class="terminal">
$ aws ec2 modify-network-interface-attribute \
    --network-interface-id ENI-ID \
    --groups SECURITY-GROUP-ID
</pre>
</li>
</ol>

## <a id="initialize-and-configure"></a>Initialize and Configure New HSMs

Complete the following steps for each HSM, regardless of whether they are Luna HSMs or AWS CloudHSMs.

#### SSH onto the HSM
<ol>
<li>Get the HSM IP.
<pre class="terminal">$ cloudhsm describe-hsm -H HSM-ARN -r AWS-REGION</pre>
</li>
<li>SSH onto the HSM.
<pre class="terminal">$ ssh -i path/to/ssh-key.pem manager@HSM-IP</pre>
</li>
</ol>

#### Initialize and Set Policies

<ol>
<li>Initialize the HSM and create an Administrator password. Initialize all HSMs into the same cloning domain to guarantee HA.
<pre class="terminal">lunash:> hsm init -label LABEL</pre>
</li>
<li>Log into the HSM using the password you just created.
<pre class="terminal">lunash:> hsm login</pre>
</li>
<li>Confirm that only FIPS algorithms are enabled.
<pre class="terminal">lunash:> hsm changePolicy -policy 12 -value 0</pre>
</li>
<li>Run <code>hsm showPolicies</code> to confirm that <code>Allow cloning</code> and <code>Allow network replication</code> policy values are set to <strong>On</strong> on the HSM. <br/><br>

If these values are not set to <strong>On</strong>, change them by running the following command:

<pre class="terminal">lunash:> hsm changePolicy -policy POLICY-CODE -value 1</pre>
</li>
<li>Validate that the <code>SO can reset partition PIN</code> is set correctly. If it is set to <strong>Off</strong>, consecutive failed login attempts will permanently erase the partition once the failure count hits the configured threshold. <br/><br>

If <code>SO can reset partition PIN</code> is set to <strong>On</strong>, the partition locks once the threshold is met. An HSM Admin must unlock the partition, but no data will be lost. Use the following command to set the policy to <strong>On</strong>:

<pre class="terminal">lunash:> hsm changePolicy -policy 15 -value 1</pre>
</li>
</ol>
#### Retrieve HSM Certificate

Fetch the certificate from the HSM. This is used to validate the identity of the HSM when connecting to it.

<pre class="terminal">$ scp -i path/to/ssh-key.pem \
    manager@HSM-IP:server.pem \
    HSM-IP.pem
</pre>

#### Create an HSM Partition
<ol>
<li>Create a partition to hold the encryption keys. The partition password must be the same for all partitions in the HA partition group. The cloning domain must be <a href="#cloning">the same as earlier</a>.

<pre class="terminal">lunash:> partition create -partition PARTITION-NAME -domain CLONING-DOMAIN</pre>
</li>

<li>Record the partition serial number labeled <code>Partition SN</code>.

<pre class="terminal">lunash:> partition show -partition PARTITION-NAME</pre>
</li>
</ol>

## <a id='create-register-hsm'></a>Create and Register HSM Clients 

Clients that communicate with the HSM must provide a client certificate to establish a client-authenticated session. You must set up each client's certificate on the HSM and assign access rights for each partition they access.

#### Establish a Network Trust Link between the Client and the HSMs
<ol>
<li>Create a certificate for the client.

<pre class="terminal">
$ openssl req \
  -x509   \
  -newkey rsa:4096 \
  -days   NUMBER-OF-DAYS \
  -sha256 \
  -nodes  \
  -subj   "/CN=CLIENT-HOSTNAME-OR-IP" \
  -keyout CLIENT-HOSTNAME-OR-IPKey.pem \
  -out    CLIENT-HOSTNAME-OR-IP.pem
</pre>
</li>
<li>Copy the client certificate to each HSM.

<pre class="terminal">
$ scp -i path/to/ssh-key.pem \
    CLIENT-HOSTNAME-OR-IP.pem \
    manager@HSM-IP:CLIENT-HOSTNAME-OR-IP.pem
</pre>
</li>
</ol>

#### Register HSM Client Host and Partitions

<ol>
<li>Create a client. The client hostname is the hostname of the planned CredHub instance(s).

<pre class="terminal">lunash:> client register -client CLIENT-NAME -hostname CLIENT-HOSTNAME</pre>

If you're only planning to run one CredHub instance, it's possible to register a client with the planned CredHub IP.

<pre class="terminal">lunash:> client register -client CLIENT-NAME -ip CLIENT-IP
</pre>
</li>
<li>Assign the partition created in the previous section to the client.

<pre class="terminal">lunash:> client assignPartition -client CLIENT-NAME -partition PARTITION-NAME
</pre>
</li>
</ol>
## <a id="hsm-encryption-keys"></a>Encryption Keys on the HSM

Set which key used for encryption operations by defining the encryption key name in the deploy manifest. By default, a key that exists on the HSM is used for encryption operations. If a key does not exist on the HSM, CredHub creates it automatically in the referenced partition. 

When you generate a new key, review the list of keys on each HSM to validate that key replication is occurring. If new keys do not propagate among the HSMs, you could get locked out of HSMs. 

To review stored keys on a partition:

<pre class="terminal">lunash:> partition showContents -partition PARTITION-NAME
</pre>

## <a id='ready-deployment'></a>Ready for Deployment 

To review, you have collected and created the following resources:

1. <a href="#hsm-encryption-keys">Encryption Key Name</a>
1. <a href="#retrieve-hsm-certificate">HSM Certificate</a>
1. <a href="#cloning">Partition name and password</a>
1. <a href="#establish-network-trust-link">Client certificate and private key</a>
1. <a href="#create-hsm-partition">Partition serial numbers</a>

Enter these in the manifest as shown below.

<pre><code>
yaml
credhub: 
  properties: 
    encryption:
      keys:
        - provider_name: primary
          encryption_key_name: ENCRYPTION-KEY-NAME
          active: true
      providers:
        - name: primary
          type: hsm
          partition: PARTITION-NAME
          partition_password: PARTITION-PASSWORD
          client_certificate: CLIENT-CERTIFICATE
          client_key: CLIENT-PRIVATE-KEY
          servers: 
          - host: 10.0.0.1
            port: 1792
            certificate: HSM-CERTIFICATE
            partition_serial_number: PARTITION-SERIAL-NUMBER
          - host: 10.0.0.10
            port: 1792
            certificate: HSM-CERTIFICATE
            partition_serial_number: PARTITION-SERIAL-NUMBER
</code>
</pre>

## <a id='renew-rotate'></a>Renew or Rotate a Client Certificate 

The generated client certificate has a fixed expiration date after which the HSM no longer accepts it. Rotate or renew this certificate at any time by following the steps detailed below.

<ol>
<li>Generate a new certificate for the client.

<pre class="terminal">
$ openssl req \
  -x509   \
  -newkey rsa:4096 \
  -days   NUMBER-OF-DAYS \
  -sha256 \
  -nodes  \
  -subj   "/CN=CLIENT-HOSTNAME-OR-IP" \
  -keyout CLIENT-HOSTNAME-OR-IPKey.pem \
  -out    CLIENT-HOSTNAME-OR-IP.pem
</pre>
</li>
<li>Copy the client certificate to each HSM.

<pre class="terminal">
$ scp -i path/to/ssh-key.pem \
    CLIENT-HOSTNAME-OR-IP.pem \
    manager@HSM-IP:CLIENT-HOSTNAME-OR-IP.pem
</pre>
</li>
<li>(Optional) Review the client's partition assignments. 

<pre class="terminal">lunash:> client show -client CLIENT-NAME
</pre>
</li>  
<li>Remove the existing client. 

<p class="note"><strong>Note:</strong> All partition assignments will be deleted.</p>

<pre class="terminal">lunash:> client delete -client CLIENT-NAME
</pre>
</li>  
<li>Re-register the client.

<pre class="terminal">lunash:> client register -client CLIENT-NAME -ip CLIENT-IP
</pre>
</li>  
<li>Re-assign partition assignments.

<pre class="terminal">lunash:> client assignPartition -client CLIENT-NAME -partition PARTITION-NAME
</pre>
</li>  
<li>(Optional) Validate the new certificate fingerprint.

<pre class="terminal">lunash:> client fingerprint -client CLIENT-NAME
</pre>

If you need to, you can compare the fingerprint to your locally stored certificate: 

<pre class="terminal">$ openssl x509 -in clientcert.pem -outform DER | md5sum</pre></li></ol>